using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace ThreadsInWPF
{
    /// <summary>
    /// Interaction logic for ASyncTest.xaml
    /// </summary>
    public partial class ASyncTest : Window
    {
        public ASyncTest()
        {
            InitializeComponent();
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
           
           lblmsg.Content= LongRunningOperation();
           //lblmsg2.Content = "Hi"; // UI Will not update until button1() finished.
           //Thread.Sleep(3000);
        }

        public string LongRunningOperation()
        {
            Thread.Sleep(5000);
            return "Hello";
        }

        public Task<string> LongRunningOperationAsync()
        {
            return Task.Run(() =>
            {
                System.Diagnostics.Debug.WriteLine(" LongRunningOperationAsync() running in thread " + Thread.CurrentThread.ManagedThreadId);
                Thread.Sleep(10000);
                //var k = 0; // To generate exception
                //var i = 5 / k;
               
                return "Hello";
            });
        }

        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
             //lblmsg.Content= LongRunningOperationAsync().Result;
            
            //System.Diagnostics.Debug.WriteLine(" Method running in thread " + Thread.CurrentThread.ManagedThreadId);
            
            Task<string> tsk = LongRunningOperationAsync();
            
            // performing some extra work
            //int extraWorkCounter = 0;
            //for (int i = 0; i < 5; i++)
            //{
            //    extraWorkCounter++;
            //    Thread.Sleep(1000);
            //}
            
            //lblmsg2.Content = extraWorkCounter.ToString();
            
            lblmsg.Content = tsk.Result;

             
        }
        private async void Button_Click_3(object sender, RoutedEventArgs e)
        {
            lblmsg.Content = await LongRunningOperationAsync();
            
            //below Line will BeginAnimation printed after getting result from LongrunningOperation();
            lblmsg.Content = "Doing some extra work";

        }
        private  void Button_Click_4(object sender, RoutedEventArgs e)
        {
            try
            {

                PerformWorkAsyncWithException(); // if async and await in not present here we will not be able to handle exception generated by async method here.

                lblmsg.Content = "Doing some extra work after async call"; // if await present in above line then this line will execute after gertting result.

            }
            catch (Exception ex)
            {
                lblmsg.Content = ex.Message;
            }
        }
        
        public async Task PerformWorkAsync() // unable to handle exception if method returns void.
        {
            System.Diagnostics.Debug.WriteLine(" Method running in thread " + Thread.CurrentThread.ManagedThreadId);
            lblmsg.Content = await LongRunningOperationAsync();
          
            //below Line will BeginAnimation printed after getting result from LongrunningOperation();
            lblmsg.Content = lblmsg.Content + "  after 5 sec";
            System.Diagnostics.Debug.WriteLine(" Method finishing in thread " + Thread.CurrentThread.ManagedThreadId);
        }

        public async Task PerformWorkAsyncWithException()
        {
            try
            {
                                //System.Diagnostics.Debug.WriteLine(" Method running in thread " + Thread.CurrentThread.ManagedThreadId);
                lblmsg.Content = await LongRunningOperationAsync();
                                //below Line will BeginAnimation printed after getting result from LongrunningOperation();
                lblmsg.Content = lblmsg.Content + "  after 5 sec";
                                //System.Diagnostics.Debug.WriteLine(" Method finishing in thread " + Thread.CurrentThread.ManagedThreadId);
            }
            catch (Exception ex)
            {
                lblmsg.Content = "in method " + ex.Message;
            }
        }
    }
}
